---
name: 'Install ubi (Universal Binary Installer)'
description: 'Installs ubi, a tool for installing pre-built binaries'
author: 'Your Name'

branding:
  icon: 'download'
  color: 'blue'

inputs:
  projects:
    description: 'Newline-delimited list of projects to install using ubi after installation'
    required: false
    default: ''
  sudo:
    description: 'Whether to use sudo for installation (required for /usr/local/bin on most systems)'
    required: false
    default: 'false'
  GITHUB_TOKEN:
    description: 'GitHub token to use for API requests, helps avoid rate limiting'
    required: false
    default: ''

outputs:
  version:
    description: 'The version of ubi that was installed'
    value: ${{ steps.install.outputs.version }}

  path:
    description: 'The path where ubi was installed'
    value: ${{ steps.install.outputs.path }}

runs:
  using: 'composite'
  steps:
    - name: Install ubi
      id: install
      shell: sh
      run: |
        set -eux

        echo "Installing ubi universal binary installer..."

        # If run as non-root, ubi defaults to installing into ~/bin, which is
        # not in the default PATH in GitHub CI. So, we'll default to
        # ~/.local/bin
        LOCAL_BIN=$HOME/.local/bin
        test -d $LOCAL_BIN || mkdir -p $LOCAL_BIN
        if [ "${{ inputs.sudo }}" != "true" ] && [ -z "${TARGET:-}" ]; then
          TARGET=$LOCAL_BIN
          echo "Setting TARGET to ${TARGET}"
          export TARGET
        fi

        COMMIT=d9348539c2521f05225618139ea23fd3f54bce46
        URL_PATH="houseabsolute/ubi/$COMMIT/bootstrap/bootstrap-ubi.sh"
        INSTALLER=https://raw.githubusercontent.com/$URL_PATH

        # Download and run the bootstrap script
        if [ "${{ inputs.sudo }}" = "true" ]; then
          if [ -z "${TARGET:-}" ]; then
            curl --silent --location "$INSTALLER" | \
              env GITHUB_TOKEN="${{ inputs.github_token }}" sudo sh
          else
            curl --silent --location "$INSTALLER" | \
              sudo env TARGET="$TARGET" GITHUB_TOKEN="${{ inputs.github_token }}" sh
          fi
        else
          curl --silent --location "$INSTALLER" | \
            env TARGET="$TARGET" GITHUB_TOKEN="${{ inputs.github_token }}" sh
        fi
        if [ ! -z "${TARGET:-}" ]; then
          if [ ! "$(command -v ubi)" ]; then
            # Maybe add to PATH for subsequent steps
            echo "$TARGET" >> $GITHUB_PATH

            # update path for any projects which may need to be installed
            PATH="$TARGET:$PATH"
          fi
        fi

        # Verify installation
        if command -v ubi >/dev/null 2>&1; then
          UBI_VERSION=$(ubi --version | head -n1 | awk '{print $2}')
          UBI_PATH=$(which ubi)
          echo "✅ ubi ${UBI_VERSION} installed successfully at ${UBI_PATH}"
          echo "version=${UBI_VERSION}" >> $GITHUB_OUTPUT
          echo "path=${UBI_PATH}" >> $GITHUB_OUTPUT
        else
          echo "❌ Failed to install ubi"
          exit 1
        fi

        # Install additional projects if specified
        if [ -n "${{ inputs.projects }}" ]; then
          echo "Installing specified projects with ubi..."

          # Process each project in the newline-delimited list
          echo "${{ inputs.projects }}" | while read -r project; do
            if [ -n "$project" ]; then
              echo "Installing $project..."

              if [ "${{ inputs.sudo }}" = "true" ]; then
                sudo env GITHUB_TOKEN="${{ inputs.github_token }}" ubi --project $project
              else
                project_has_in=$(echo "$project" | grep -- "--in" || true)
                if [ -z "$project_has_in" ] && [ -n "$TARGET" ]; then
                  env GITHUB_TOKEN="${{ inputs.github_token }}" ubi --project $project --in "$TARGET"
                else
                  env GITHUB_TOKEN="${{ inputs.github_token }}" ubi --project $project
                fi
              fi

              echo "✅ Installed $project"
            fi
          done
        fi
